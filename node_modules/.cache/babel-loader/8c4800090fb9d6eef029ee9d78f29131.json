{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar React = require('react');\n\nvar isDOM = (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && _typeof(window.document) === 'object';\n\nfunction ReactBodymovinImpl(bodymovin) {\n  var ReactBodymovin = function (_React$Component) {\n    _inherits(ReactBodymovin, _React$Component);\n\n    function ReactBodymovin() {\n      _classCallCheck(this, ReactBodymovin);\n\n      return _possibleConstructorReturn(this, (ReactBodymovin.__proto__ || Object.getPrototypeOf(ReactBodymovin)).apply(this, arguments));\n    }\n\n    _createClass(ReactBodymovin, [{\n      key: 'componentDidMount',\n      value: function componentDidMount() {\n        if (isDOM) {\n          var options = Object.assign({}, this.props.options);\n          options.wrapper = this.wrapper;\n          options.renderer = 'svg';\n          this.animation = bodymovin.loadAnimation(options);\n        }\n      }\n    }, {\n      key: 'componentWillUnmount',\n      value: function componentWillUnmount() {\n        if (isDOM) {\n          this.animation.destroy();\n        }\n      }\n    }, {\n      key: 'shouldComponentUpdate',\n      value: function shouldComponentUpdate() {\n        return false;\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _this2 = this;\n\n        var storeWrapper = function storeWrapper(el) {\n          _this2.wrapper = el;\n        };\n\n        return React.createElement('div', {\n          className: 'react-bodymovin-container',\n          ref: storeWrapper\n        }, this.props.children);\n      }\n    }]);\n\n    return ReactBodymovin;\n  }(React.Component);\n\n  return ReactBodymovin;\n}\n\nmodule.exports = ReactBodymovinImpl;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(isDOM, 'isDOM', 'src/ReactBodymovinImpl.js');\n\n  __REACT_HOT_LOADER__.register(ReactBodymovinImpl, 'ReactBodymovinImpl', 'src/ReactBodymovinImpl.js');\n}();\n\n;","map":null,"metadata":{},"sourceType":"script"}